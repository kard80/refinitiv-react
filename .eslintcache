[{"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/index.js":"1","/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/App.js":"2","/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/reportWebVitals.js":"3","/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/components/QuestionOne.js":"4","/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/components/QuestionTwo.js":"5"},{"size":500,"mtime":1611073341410,"results":"6","hashOfConfig":"7"},{"size":647,"mtime":1611158955773,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611073341411,"results":"9","hashOfConfig":"7"},{"size":2028,"mtime":1611158298848,"results":"10","hashOfConfig":"7"},{"size":1138,"mtime":1611161272841,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"amd9zt",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/index.js",[],["25","26"],"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/App.js",[],"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/reportWebVitals.js",[],"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/components/QuestionOne.js",["27","28","29","30","31"],"import React, { useEffect, useState } from 'react'\nimport '../style/questionOne.css'\nexport default function QuestionOne() {\n    const [inputOne, setInputOne] = useState(0)\n    const [inputTwo, setInputTwo] = useState(1)\n    const [output, setOutput] = useState(false)\n    const inputModifier = value => {\n        if (value % 1 !== 0) {\n            value = Math.round(value)\n        }\n        if (value < 0) {\n            value = 1\n        }\n        setInputOne(value)\n    }\n\n    const calculatePrimeNumber = () => {\n        if (inputOne === \"0\" || inputOne === \"1\") {\n            console.log(inputOne)\n            return setOutput(false)\n            \n        }\n        for (let i = 2; i < inputOne; i++) {\n            if (inputOne % i == 0) {\n                return setOutput(false)\n\n            }\n        }\n        setOutput(true)\n\n    }\n\n    const calculateFibonacci = () => {\n        let a = 0\n        let b = 1\n        if (inputOne === a & b) {\n            return setOutput(true)\n\n        }\n        let c = a + b\n        while( c <= inputOne) {\n            if (c == inputOne) return setOutput(true);\n            a = b\n            b = c\n            c = a + b\n        }\n        return setOutput(false)\n    }\n\n    useEffect(() => {\n        if (inputTwo == 1) {\n            calculatePrimeNumber()\n        } else if (inputTwo == 2) {\n            calculateFibonacci()\n        }\n    }, [inputOne, inputTwo])\n\n    return (\n        <div className=\"questionOne\">\n            <div className=\"one\">\n                <input type=\"number\" value={inputOne} onChange={e => inputModifier(e.target.value)} />\n            </div>\n            <div className=\"two\">\n                <select\n                    value={inputTwo}\n                    onChange={e => setInputTwo(parseInt(e.target.value))} >\n                    <option value={1}>isPrime</option>\n                    <option value={2}>isFibonacci</option>\n                </select>\n            </div>\n            <div className=\"three\">{output.toString()}</div>\n        </div>\n    )\n}\n",["32","33"],"/Users/gwdev/Desktop/Coding/Mine/refinitiv/src/components/QuestionTwo.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":24,"column":30,"nodeType":"40","messageId":"41","endLine":24,"endColumn":32},{"ruleId":"38","severity":1,"message":"39","line":42,"column":19,"nodeType":"40","messageId":"41","endLine":42,"endColumn":21},{"ruleId":"38","severity":1,"message":"39","line":51,"column":22,"nodeType":"40","messageId":"41","endLine":51,"endColumn":24},{"ruleId":"38","severity":1,"message":"39","line":53,"column":29,"nodeType":"40","messageId":"41","endLine":53,"endColumn":31},{"ruleId":"42","severity":1,"message":"43","line":56,"column":8,"nodeType":"44","endLine":56,"endColumn":28,"suggestions":"45"},{"ruleId":"34","replacedBy":"46"},{"ruleId":"36","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateFibonacci' and 'calculatePrimeNumber'. Either include them or remove the dependency array.","ArrayExpression",["50"],["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [calculateFibonacci, calculatePrimeNumber, inputOne, inputTwo]",{"range":"53","text":"54"},[1384,1404],"[calculateFibonacci, calculatePrimeNumber, inputOne, inputTwo]"]